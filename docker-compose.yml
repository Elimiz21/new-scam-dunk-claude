version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scamdunk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: scamdunk
      POSTGRES_PASSWORD: scamdunk_dev_2024
      POSTGRES_DB: scamdunk
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./.devcontainer/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scamdunk -d scamdunk"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scamdunk-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: scamdunk-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scamdunk-network

  # Elasticsearch for search and logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: scamdunk-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - scamdunk-network

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: scamdunk-kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - scamdunk-network

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: scamdunk-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - scamdunk-network

  # NestJS API
  api:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
    container_name: scamdunk-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://scamdunk:scamdunk_dev_2024@postgres:5432/scamdunk
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev_jwt_secret_change_in_production
      JWT_REFRESH_SECRET: dev_jwt_refresh_secret_change_in_production
      PORT: 4000
      AI_SERVICE_URL: http://ai:8001
      BLOCKCHAIN_SERVICE_URL: http://blockchain:3002
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BROKERS: kafka:29092
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - ./packages/api:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scamdunk-network

  # Next.js Web Application
  web:
    build:
      context: ./packages/web
      dockerfile: Dockerfile
    container_name: scamdunk-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
      NEXTAUTH_SECRET: dev_nextauth_secret_change_in_production
      NEXTAUTH_URL: http://localhost:3000
    volumes:
      - ./packages/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scamdunk-network

  # Python AI Service
  ai:
    build:
      context: ./packages/ai
      dockerfile: Dockerfile
    container_name: scamdunk-ai
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://scamdunk:scamdunk_dev_2024@postgres:5432/scamdunk
      MODEL_PATH: /app/models
      LOG_LEVEL: INFO
      MAX_WORKERS: 4
    volumes:
      - ./packages/ai:/app
      - ai_models:/app/models
      - ai_logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scamdunk-network

  # Blockchain Verification Service
  blockchain:
    build:
      context: ./packages/blockchain
      dockerfile: Dockerfile
    container_name: scamdunk-blockchain
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3002
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://scamdunk:scamdunk_dev_2024@postgres:5432/scamdunk
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY:-demo}
      BSCSCAN_API_KEY: ${BSCSCAN_API_KEY:-demo}
      POLYGONSCAN_API_KEY: ${POLYGONSCAN_API_KEY:-demo}
      INFURA_PROJECT_ID: ${INFURA_PROJECT_ID:-demo}
      ALCHEMY_API_KEY: ${ALCHEMY_API_KEY:-demo}
    volumes:
      - ./packages/blockchain:/app
      - /app/node_modules
    ports:
      - "3002:3002"
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scamdunk-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: scamdunk-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    networks:
      - scamdunk-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: scamdunk-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - scamdunk-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: scamdunk-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3333:3000"
    depends_on:
      - prometheus
    networks:
      - scamdunk-network

networks:
  scamdunk-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  kafka_data:
  minio_data:
  ai_models:
  ai_logs:
  prometheus_data:
  grafana_data: