// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic info
  email         String  @unique
  firstName     String
  lastName      String
  avatar        String?
  emailVerified Boolean @default(false)
  phoneVerified Boolean @default(false)

  // Auth
  passwordHash     String
  role             Role           @default(USER)
  twoFactorEnabled Boolean        @default(false)
  twoFactorSecret  String?
  lastLoginAt      DateTime?
  refreshTokens    RefreshToken[]
  sessions         Session[]

  // Profile
  bio      String?
  website  String?
  location Json?
  timezone String  @default("UTC")
  language String  @default("en")
  currency String  @default("USD")

  // Preferences
  preferences Json @default("{}")
  settings    Json @default("{}")

  // Subscription
  subscriptionPlan     SubscriptionPlan   @default(FREE)
  subscriptionStatus   SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  trialEnd             DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?

  // Usage tracking
  scansUsed    Int      @default(0)
  apiCallsUsed Int      @default(0)
  usageResetAt DateTime @default(now())

  // Relations
  scans             Scan[]
  detectionFeedback DetectionFeedback[]
  apiKeys           ApiKey[]
  notifications     Notification[]
  chatImports       ChatImport[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  sessionToken String   @unique
  deviceInfo   Json
  expiresAt    DateTime
  lastActiveAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model ApiKey {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  name        String
  keyHash     String    @unique
  permissions String[]
  lastUsed    DateTime?
  expiresAt   DateTime?
  active      Boolean   @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Scan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  type   ScanType
  status ScanStatus @default(PENDING)

  // Input data
  input    Json
  metadata Json     @default("{}")
  tags     String[]

  // Results
  result              Json?
  processingStartedAt DateTime?
  processingEndedAt   DateTime?
  processingTime      Int? // milliseconds

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  detections Detection[]
  chatImport ChatImport?

  @@map("scans")
}

model Detection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scanId String
  type   DetectionType

  confidence  Float
  riskScore   Int
  riskLevel   RiskLevel
  description String
  evidence    Json      @default("[]")
  indicators  Json      @default("[]")
  mitigation  Json      @default("{}")
  references  Json      @default("[]")

  // Relations
  scan     Scan                @relation(fields: [scanId], references: [id], onDelete: Cascade)
  feedback DetectionFeedback[]

  @@map("detections")
}

model DetectionFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  detectionId String

  accurate       Boolean
  comment        String?
  additionalInfo String?

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  detection Detection @relation(fields: [detectionId], references: [id], onDelete: Cascade)

  @@unique([userId, detectionId])
  @@map("detection_feedback")
}

model BlockchainAddress {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  network     BlockchainNetwork
  address     String
  addressType AddressType       @default(UNKNOWN)

  // Analysis results
  riskScore      Int
  riskLevel      RiskLevel
  reputation     Json      @default("{}")
  analysis       Json      @default("{}")
  associations   Json      @default("[]")
  flags          Json      @default("[]")
  lastAnalyzedAt DateTime?

  @@unique([network, address])
  @@map("blockchain_addresses")
}

model ThreatIndicator {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        IndicatorType
  value       String
  description String
  confidence  Float
  severity    Severity

  firstSeen  DateTime
  lastSeen   DateTime @default(now())
  reportedBy String[]
  tags       String[]

  @@unique([type, value])
  @@map("threat_indicators")
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  type   NotificationType
  title  String
  body   String
  data   Json             @default("{}")

  read     Boolean   @default(false)
  readAt   DateTime?
  priority Priority  @default(NORMAL)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String?
  action    String
  resource  String?
  details   Json    @default("{}")
  ipAddress String?
  userAgent String?

  @@map("audit_logs")
}

model ChatImport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  scanId   String?          @unique // Optional link to scan result
  platform ChatPlatform
  status   ChatImportStatus @default(UPLOADING)

  // File info
  originalFileName String
  fileSize         Int
  filePath         String? // Temporary file path during processing
  fileHash         String // SHA256 hash for deduplication

  // Processing info
  processingStartedAt DateTime?
  processingEndedAt   DateTime?
  processingTime      Int? // milliseconds
  errorMessage        String?

  // Chat metadata
  messageCount     Int   @default(0)
  participantCount Int   @default(0)
  dateRange        Json? // {from: Date, to: Date}
  metadata         Json  @default("{}")

  // Analysis results
  overallRiskScore Int?
  riskLevel        RiskLevel?
  keyFindings      String[]
  summary          String?

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  scan         Scan?             @relation(fields: [scanId], references: [id], onDelete: SetNull)
  messages     ChatMessage[]
  participants ChatParticipant[]
  ChatAnalysis ChatAnalysis?

  @@map("chat_imports")
}

model ChatMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatImportId String
  messageId    String // Original message ID from the platform
  timestamp    DateTime
  senderId     String
  senderName   String
  content      String
  messageType  MessageType @default(TEXT)

  // Message metadata
  edited    Boolean   @default(false)
  editedAt  DateTime?
  deleted   Boolean   @default(false)
  forwarded Boolean   @default(false)
  replyToId String?
  threadId  String?

  // Extracted entities
  urls            String[]
  phoneNumbers    String[]
  emails          String[]
  walletAddresses String[]
  mentions        String[]
  hashtags        String[]

  // Risk assessment
  riskScore Int      @default(0)
  riskFlags String[]

  // Attachments
  attachments Json @default("[]") // Array of MessageAttachment objects

  // Relations
  chatImport ChatImport @relation(fields: [chatImportId], references: [id], onDelete: Cascade)

  @@unique([chatImportId, messageId])
  @@index([timestamp])
  @@index([senderId])
  @@index([riskScore])
  @@map("chat_messages")
}

model ChatParticipant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatImportId  String
  participantId String // Original participant ID from the platform
  name          String
  username      String?
  phoneNumber   String?
  avatar        String?
  role          ParticipantRole @default(MEMBER)

  // Activity stats
  messageCount Int       @default(0)
  firstMessage DateTime?
  lastMessage  DateTime?
  joinedAt     DateTime?
  leftAt       DateTime?

  // Risk assessment
  riskScore Int      @default(0)
  riskFlags String[]

  // Relations
  chatImport ChatImport @relation(fields: [chatImportId], references: [id], onDelete: Cascade)

  @@unique([chatImportId, participantId])
  @@map("chat_participants")
}

model ChatAnalysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatImportId String             @unique
  analysisType ChatAnalysisType
  status       ChatAnalysisStatus @default(PENDING)

  // Analysis results
  overallRiskScore   Int
  riskLevel          RiskLevel
  confidence         Float
  summary            String
  keyFindings        String[]
  suspiciousElements Json      @default("[]")
  recommendations    String[]

  // Performance metrics
  processingTime    Int // milliseconds
  messagesAnalyzed  Int
  patternsDetected  Int
  entitiesExtracted Int

  // Relations
  chatImport ChatImport @relation(fields: [chatImportId], references: [id], onDelete: Cascade)

  @@map("chat_analyses")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIALING
}

enum ScanType {
  TEXT
  URL
  IMAGE
  CHAT_IMPORT
  FILE
}

enum ScanStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum DetectionType {
  PHISHING
  INVESTMENT_SCAM
  ROMANCE_SCAM
  FAKE_SUPPORT
  MALWARE
  SOCIAL_ENGINEERING
  IMPERSONATION
  PUMP_DUMP
  PONZI_SCHEME
  FAKE_EXCHANGE
  RUG_PULL
  FAKE_GIVEAWAY
  ADVANCE_FEE
  TECH_SUPPORT
  FAKE_JOB
  LOTTERY_SCAM
  CHARITY_SCAM
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BlockchainNetwork {
  ETHEREUM
  BITCOIN
  BINANCE_SMART_CHAIN
  POLYGON
  ARBITRUM
  OPTIMISM
  AVALANCHE
  FANTOM
  SOLANA
  CARDANO
  POLKADOT
}

enum AddressType {
  WALLET
  CONTRACT
  EXCHANGE
  MIXER
  UNKNOWN
}

enum IndicatorType {
  DOMAIN
  IP
  EMAIL
  PHONE
  WALLET_ADDRESS
  TEXT_PATTERN
  URL_PATTERN
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  SCAN_COMPLETED
  SCAN_FAILED
  SECURITY_ALERT
  SUBSCRIPTION_CHANGED
  SYSTEM_MAINTENANCE
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ChatPlatform {
  WHATSAPP
  TELEGRAM
  DISCORD
  INSTAGRAM
  SIGNAL
  IMESSAGE
  OTHER
}

enum ChatImportStatus {
  UPLOADING
  VALIDATING
  PARSING
  ANALYZING
  COMPLETED
  FAILED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  STICKER
  LOCATION
  CONTACT
  POLL
  SYSTEM
  VOICE_NOTE
  DOCUMENT
}

enum ParticipantRole {
  ADMIN
  MODERATOR
  MEMBER
  BOT
  UNKNOWN
}

enum ChatAnalysisType {
  BASIC
  DETAILED
  FORENSIC
  REAL_TIME
}

enum ChatAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
